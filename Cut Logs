// Recursive Approach -> TLE
#include<bits/stdc++.h>
vector<vector<int>> dp;
int func(int k, int n) {
    if(k == 0) {
        return INT_MAX;
    } else if(n == 0) {
        return 0;
    } else if(k == 1) {
        return n;
    } else if(n == 1) {
        return 1;
    } else if(dp[k][n] != -1) {
        return dp[k][n];
    }

    int mini = n;

    for(int i = 1;i <= n;i++) {
        int possibleToCut = func(k, n - i); // ith log is possible to cut
        int notpossibleToCut = func(k - 1, i - 1); // ith log is not possible to cut

        // To guarantee, choose the worst
        int maxi = max(possibleToCut, notpossibleToCut);
        // Out of all Worsts, choose the best
        mini = min(mini, 1 + maxi);
    }
    return dp[k][n] = mini;
}


int cutLogs(int k, int n)
{   // Egg Drop Problem
    //k -> eggs, n -> floors
    dp = vector<vector<int>>(k + 1, vector<int>(n + 1, -1));
    return func(k, n);
}


// Recursive Approach -> Binary Search
#include<bits/stdc++.h>
vector<vector<int>> dp;
int func(int k, int n) {
    if(k == 0) {
        return INT_MAX;
    } else if(n == 0) {
        return 0;
    } else if(k == 1) {
        return n;
    } else if(n == 1) {
        return 1;
    } else if(dp[k][n] != -1) {
        return dp[k][n];
    }

    int mini = n;

    int low = 1, high = n;
    while(low <= high) {
        int i = low + (high - low) / 2;
        int possibleToCut = func(k, n - i); // ith log is possible to cut
        int notpossibleToCut = func(k - 1, i - 1); // ith log is not possible to cut

        // To guarantee, choose the worst
        int maxi = max(possibleToCut, notpossibleToCut);
        // Out of all Worsts, choose the best
        mini = min(mini, 1 + maxi);

        if(possibleToCut < notpossibleToCut) {
            high = i - 1;
        } else {
            low = i + 1;
        }
    }
    return dp[k][n] = mini;
}

int cutLogs(int k, int n)
{   // Egg Drop Problem
    //k -> eggs, n -> floors
    dp = vector<vector<int>>(k + 1, vector<int>(n + 1, -1));
    return func(k, n);
}



// Tabulation
#include<bits/stdc++.h>
int cutLogs(int k, int n)
{
    int dp[k + 1][n + 1];
    
    for(int i = 0;i <= k;i++) {
        for(int j = 0;j <= n;j++) {
            if(i == 0) { // 0 axe 
                dp[i][j] = INT_MAX;    
            } else if(j == 0) { // 0 log
                dp[i][j] = 0;
            } else if(i == 1) { // 1 axe
                dp[i][j] = j;
            } else if(j == 1) { // 1 log
                dp[i][j] = 1;
            } else {
                dp[i][j] = j;
                int low = 1, high = j;
                while(low <= high) {
                    int k = low + (high - low) / 2;
                    int possibleToCut = dp[i][j - k];
                    int notpossibleToCut = dp[i - 1][k - 1];
                    dp[i][j] = min(dp[i][j], 1 + max(possibleToCut, notpossibleToCut));
                    if(possibleToCut < notpossibleToCut) {
                        high = k - 1;
                    } else {
                        low = k + 1;
                    }
                }
            }
        }
    }
    
    return dp[k][n];
}

