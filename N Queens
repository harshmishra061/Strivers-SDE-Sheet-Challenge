bool PossibleToPut(int idx, vector<int>& chessBoard, int n) {
    int row = idx / n, col = idx % n;

    int r = row, c;
    while(r >= 0) {
        if(chessBoard[r * n + col] == 1) return false;
        r--;
    } 

    r = row, c = col;
    while(r >= 0 && c >= 0) {
        if(chessBoard[r * n + c] == 1) return false;
        r--, c--;
    }

    r = row, c = col;
    while(r >= 0 && c < n) {
        if(chessBoard[r * n + c] == 1) return false;
        r--, c++;
    }

    return true;
}


void findConfig(int row, vector<int>& chessBoard, vector<vector<int>>& res, int n) {
    if(row == n) {
        res.push_back(chessBoard);
    } else {
        for(int col = 0;col < n;col++) {
            int idx = row * n + col;
            if(PossibleToPut(idx, chessBoard, n)) {
                chessBoard[idx] = 1;
                findConfig(row + 1, chessBoard, res, n);
                chessBoard[idx] = 0;
            }
        }
    }
}



vector<vector<int>> solveNQueens(int n) {
    vector<int> chessBoard(n*n, 0);
    vector<vector<int>> res;
    findConfig(0, chessBoard, res, n);
    return res;
}
