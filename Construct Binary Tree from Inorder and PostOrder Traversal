TreeNode<int>* constructTree(map<int, int>& idxOf, int inSt, int inEd, vector<int>& postorder, int pSt, int pEd) {
     if(inSt > inEd) return NULL;

     TreeNode<int>* root = new TreeNode<int>(postorder[pEd]);
     int idxOfRoot = idxOf[postorder[pEd]]; // finding idx in inorder
     int leftLen = idxOfRoot - inSt;
     root->left = constructTree(idxOf, inSt, idxOfRoot - 1, postorder, pSt,pSt + leftLen - 1);
     root->right = constructTree(idxOf, idxOfRoot + 1, inEd, postorder, pSt + leftLen, pEd - 1);
     return root;
}

TreeNode<int>* getTreeFromPostorderAndInorder(vector<int>& postOrder, vector<int>& inOrder) 
{
     int n = inOrder.size();
	map<int, int> idxOf;
     for(int i = 0;i < n;i++) idxOf[inOrder[i]] = i;

     return constructTree(idxOf, 0, n - 1, postOrder, 0, n - 1);
}
