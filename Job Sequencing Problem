// O(n * 100000)
#include <bits/stdc++.h> 
int jobScheduling(vector<vector<int>> &arr)
{
    sort(arr.begin(), arr.end(), [](vector<int> &a, vector<int> &b) {
        return a[1] > b[1];
    });

    vector<bool> reserved(100001, false);
    int res = 0;

    for(int i = 0;i < arr.size();i++) {
        int pos;
        for(pos = arr[i][0];pos >= 1;pos--) {
            if(reserved[pos] == false) break;
        }
        if(pos > 0) {
            reserved[pos] = true;
            res += arr[i][1];
        }
    }
    return res;   
}


// Using set

#include <bits/stdc++.h> 
int jobScheduling(vector<vector<int>> &arr)
{
    sort(arr.begin(), arr.end(), [](vector<int> &a, vector<int> &b) {
        return a[1] > b[1];
    });

    set<int> s;
    for(int i = 1;i <= 100000;i++) s.insert(i);
    int res = 0;

    for(int i = 0;i < arr.size();i++) {
        auto it = s.upper_bound(arr[i][0]);
        if(it != s.begin()) {
            res += arr[i][1];
            s.erase(prev(it));
        }
    }
    return res;   
}

