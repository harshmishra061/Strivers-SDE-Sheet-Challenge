//1ST METHOD - UNSIG INORDER
string serializeTree(TreeNode<int> *root)
{
    string str = "";
    if(root == NULL) return str;
    queue<TreeNode<int>*> q;
    q.push(root);
    while(!q.empty()) {
        root = q.front(); q.pop();
        if(root != NULL) {
            str += to_string(root->data) + ",";
            q.push(root->left);
            q.push(root->right);
        } else {
            str += "N,";
        }
    }
    return str;
}

TreeNode<int>* deserializeTree(string &str)
{
    if(str == "") return NULL;
    stringstream ss(str);
    string nodeVal;
    getline(ss, nodeVal, ',');
    
    TreeNode<int>* root = new TreeNode<int>(stoi(nodeVal));
    queue<TreeNode<int>*> q;
    q.push(root);
    while(!q.empty()) {
        TreeNode<int>* node = q.front(); q.pop();
        getline(ss, nodeVal, ',');
        
        if(nodeVal != "N") {
            node->left = new TreeNode<int>(stoi(nodeVal));
            q.push(node->left);
        }

        getline(ss, nodeVal, ',');
        if(nodeVal != "N") {
            node->right = new TreeNode<int>(stoi(nodeVal));
            q.push(node->right);
        }
    }
    return root;
}


METHOD 2 : USING PREORDER

string serializeTree(TreeNode<int> *root)
{
    if(root == NULL) return "N ";
    return to_string(root->data) + " " + serializeTree(root->left) + serializeTree(root->right);
}


TreeNode<int>* deserializeTree(stringstream& ss) {
    string nodeVal;
    ss >> nodeVal;
    if(nodeVal == "N") return NULL;
    TreeNode<int>* root = new TreeNode<int>(stoi(nodeVal));
    root->left = deserializeTree(ss);
    root->right = deserializeTree(ss);
    return root;
}

TreeNode<int>* deserializeTree(string &str)
{
    stringstream ss(str);
    return deserializeTree(ss);
}
