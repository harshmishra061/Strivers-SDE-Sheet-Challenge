// Recursive Approach -> TLE
#include<bits/stdc++.h>
vector<vector<int>> dp;
int func(int k, int n) {
    if(k == 0) {
        return INT_MAX;
    } else if(n == 0) {
        return 0;
    } else if(k == 1) {
        return n;
    } else if(n == 1) {
        return 1;
    } else if(dp[k][n] != -1) {
        return dp[k][n];
    }

    int mini = n;

    for(int i = 1;i <= n;i++) {
        int possibleToCut = func(k, n - i); // ith log is possible to cut
        int notpossibleToCut = func(k - 1, i - 1); // ith log is not possible to cut

        // To guarantee, choose the worst
        int maxi = max(possibleToCut, notpossibleToCut);
        // Out of all Worsts, choose the best
        mini = min(mini, 1 + maxi);
    }
    return dp[k][n] = mini;
}


int cutLogs(int k, int n)
{   // Egg Drop Problem
    //k -> eggs, n -> floors
    dp = vector<vector<int>>(k + 1, vector<int>(n + 1, -1));
    return func(k, n);
}



// Tabulation
