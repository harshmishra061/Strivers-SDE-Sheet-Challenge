// Using DSU -------------------------------------------------------------------------------->

int findPar(int x, vector<int>& par) {
    if(x == par[x]) return x;
    return par[x] = findPar(par[x], par);
}

bool mergeAndDetectCycle(int x, int y, vector<int>& par) {
    x = findPar(x, par);
    y = findPar(y, par);
    if(x == y) return true;
    par[x] = y;
    return false;
}
string cycleDetection (vector<vector<int>>& edges, int n, int m)
{
    vector<int> par(n + 1);
    for(int i = 1;i <= n;i++) {
        par[i] = i;
    }

    for(auto& edge : edges) {
        if(mergeAndDetectCycle(edge[0], edge[1], par) == true) return "Yes";
    }
    return "No";
}


// Using DFS ----------------------------------------------->
bool hasCycle(int node, int par, vector<vector<int>>& adj, vector<bool>& visited) {
    visited[node] = true;
    for(auto& nbr : adj[node]) {
        if(visited[nbr] == false) {
            if(hasCycle(nbr, node, adj, visited) == true) return true;
        } else if(nbr != par){
            return true;
        }
    }
    return false;
}

string cycleDetection (vector<vector<int>>& edges, int n, int m)
{
    vector<vector<int>> adj(n);
    for(auto& edge : edges) {
        adj[edge[0] - 1].push_back(edge[1] - 1);
        adj[edge[1] - 1].push_back(edge[0] - 1);
    }

    vector<bool> visited(n, false);
    for(int i = 0;i < n;i++) {
        if(visited[i] == true) continue;
        if(hasCycle(i, -1, adj, visited) == true) return "Yes"; 
    }

    return "No";
}



USING BFS --------------------------------------------->

#include<bits/stdc++.h>
bool hasCycle(int node, int par, vector<vector<int>>& adj, vector<bool>& visited) {
    visited[node] = true;
    queue<pair<int, int>> q;
    q.push({node, -1}); // Node vs Par

    while(!q.empty()) {
        node = q.front().first;
        int par = q.front().second;  q.pop();
        for(auto& nbr : adj[node]) {
            if(!visited[nbr]) {
                visited[nbr] = true;
                q.push({nbr, node});
            } else if(nbr != par) return true;
        }
    }
    return false;
}

string cycleDetection (vector<vector<int>>& edges, int n, int m)
{
    vector<vector<int>> adj(n);
    for(auto& edge : edges) {
        adj[edge[0] - 1].push_back(edge[1] - 1);
        adj[edge[1] - 1].push_back(edge[0] - 1);
    }

    vector<bool> visited(n, false);
    for(int i = 0;i < n;i++) {
        if(visited[i] == true) continue;
        if(hasCycle(i, -1, adj, visited) == true) return "Yes"; 
    }

    return "No";
}
