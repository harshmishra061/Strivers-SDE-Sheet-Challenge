#include<bits/stdc++.h>
int longestIncreasingSubsequence(int arr[], int n)
{
    // O(n^2) -> Time Limit Exceed
    int lis = 1;
    vector<int> dp(n, 1);

    for(int i = 1;i < n;i++) {
        for(int j = 0;j < i;j++) {
            if(arr[j] < arr[i]) {
                dp[i] = max(dp[i], dp[j] + 1);
            }
        }
        lis = max(lis, dp[i]);
    }

    return lis;
}


#include<bits/stdc++.h>
int longestIncreasingSubsequence(int arr[], int n)
{
    // O(nlogn)

    vector<int> lis;
    lis.push_back(arr[0]);

    for(int i = 1;i < n;i++) {
        if(lis.back() < arr[i]) {
            lis.push_back(arr[i]);
        } else {
            int idx = lower_bound(lis.begin(), lis.end(), arr[i]) - lis.begin();
            lis[idx] = arr[i];
        }
    }

    return lis.size();
}
