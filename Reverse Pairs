#include <bits/stdc++.h>


int merge(vector<int>& arr, int start, int mid, int end) {
	int i = start, j = mid + 1, count = 0, k = 0;
	while(i <= mid && j <= end) {
		if(arr[i] <= 2 * arr[j]) {
			i++;
		} else {
			count += mid - i + 1;
			j++;
		}
	}
	
	
	
	
	vector<int> tarr(end - start + 1);
	i = start, j = mid + 1;
	while(i <= mid && j <= end) {
		if(arr[i] <= arr[j]) {
			tarr[k++] = arr[i++];
		} else {
			tarr[k++] = arr[j++];
		}
	}
	while(i <= mid) tarr[k++] = arr[i++];
	while(j <= end) tarr[k++] = arr[j++];

	for(i = 0;i < tarr.size();i++) {
		arr[start + i] = tarr[i];
	}

	return count;


}

int mergeSort(vector<int>& arr, int start, int end) {
	if(start >= end) return 0;

	int count = 0;
	int mid = start + (end - start) / 2;
	count += mergeSort(arr, start, mid);
	count += mergeSort(arr, mid + 1, end);
	count += merge(arr, start, mid, end);

	return count;
}

int reversePairs(vector<int> &arr, int n){
	return mergeSort(arr, 0, n - 1);	
}
