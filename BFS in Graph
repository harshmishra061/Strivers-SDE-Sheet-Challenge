#include <bits/stdc++.h> 
vector<int> BFS(int vertex, vector<pair<int, int>> edges)
{
    vector<vector<int>> adj(vertex);
    for(auto& edge : edges) {
        adj[edge.first].push_back(edge.second);
        adj[edge.second].push_back(edge.first);
    }
    for(auto& vec : adj) sort(vec.begin(), vec.end());

    vector<int> res;
    vector<bool> visited(vertex, false);

    for(int i = 0;i < vertex;i++) {
        if(visited[i] == true) continue;

        visited[i] = true;
        queue<int> q;
        q.push(i);
        res.push_back(i);
        
        while(!q.empty()) {
            int node = q.front(); q.pop();
            for(auto& nbr : adj[node]) {
                if(visited[nbr] == true) continue;
                visited[nbr] = true;
                q.push(nbr);
                res.push_back(nbr);
            }
        }
    }
    return res;
}
