// Recursive Approach
#include <bits/stdc++.h>

vector<vector<int>> dp;
int minSumPath(int i, int j, vector<vector<int>>& grid) {
    if(i >= grid.size() || j >= grid[0].size()) return 100000000;

    if(i == grid.size() - 1 && j == grid[0].size() - 1) return grid[i][j];

    if(dp[i][j] != -1) return dp[i][j];
    
    int minCostIfMovedRight = grid[i][j] + minSumPath(i, j + 1, grid);
    int minCostIfMovedDown = grid[i][j] + minSumPath(i + 1, j, grid);

    return dp[i][j] = min(minCostIfMovedRight, minCostIfMovedDown);
}

int minSumPath(vector<vector<int>> &grid) {
    dp = vector<vector<int>>(grid.size(), vector<int>(grid[0].size(), -1));
    return minSumPath(0, 0, grid);
}

// Tabulation Approach
#include <bits/stdc++.h> 
int minSumPath(vector<vector<int>> &grid) {
    int n = grid.size(), m = grid[0].size();
    
    vector<vector<int>> dp(n, vector<int>(m));

    for(int i = n - 1;i >= 0;i--) {
        for(int j = m - 1;j >= 0;j--) {
            if(i == n - 1 && j == m - 1) {
                dp[i][j] = grid[i][j];
            } else if(i == n - 1) {
                dp[i][j] = grid[i][j] + dp[i][j + 1];
            } else if(j == m - 1) {
                dp[i][j] = grid[i][j] + dp[i + 1][j];
            } else {
                dp[i][j] = grid[i][j] + min(dp[i][j + 1], dp[i + 1][j]);
            }
        }
    }
    return dp[0][0];
}
