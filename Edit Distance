//Recursive Approach
#include<bits/stdc++.h>
vector<vector<int>> dp;
int minSteps(int i, int j, string& str1, string& str2) {
    if(i == str1.size()) return str2.size() - j;
    if(j == str2.size()) return str1.size() - i;
    if(dp[i][j] != -1) return dp[i][j];

    if(str1[i] == str2[j]) {
        return dp[i][j] = minSteps(i + 1, j + 1, str1, str2);
    }

    int del = 1 + minSteps(i, j + 1, str1, str2);
    int rep = 1 + minSteps(i + 1, j + 1, str1, str2);
    int ins = 1 + minSteps(i + 1, j, str1, str2);
    return dp[i][j] = min({del, rep, ins});
}

int editDistance(string str1, string str2)
{
    dp = vector<vector<int>>(str1.size(), vector<int>(str2.size(), -1));
    return minSteps(0, 0, str1, str2);
}


// Tabulation
#include<bits/stdc++.h>
int editDistance(string str1, string str2)
{
    vector<vector<int>> dp(str1.size() + 1, vector<int>(str2.size() + 1));
    
    for(int i = str1.size();i >= 0;i--) {
        for(int j = str2.size();j >= 0;j--) {
            if(i == str1.size()) { // str1 is empty
                dp[i][j] = str2.size() - j;
            } else if(j == str2.size()) { // str2 is empty
                dp[i][j] = str1.size() - i;
            } else {
                if(str1[i] == str2[j]) {
                    dp[i][j] = dp[i + 1][j + 1];
                } else {
                    int del = 1 + dp[i][j + 1];
                    int rep = 1 + dp[i + 1][j + 1];
                    int ins = 1 + dp[i + 1][j];
                    dp[i][j] = min({del, rep, ins});
                }
            }
        }
    }
    return dp[0][0]; 
}
