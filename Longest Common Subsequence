// Memoized Approach
#include<bits/stdc++.h>
vector<vector<int>> dp;
int lcs(string& s, string& t, int i, int j) {
	if(i == s.size() || j == t.size()) return 0;

	if(dp[i][j] != -1) return dp[i][j];

	if(s[i] == t[j]) return dp[i][j] = 1 + lcs(s, t, i + 1, j + 1);

	return dp[i][j] = max(lcs(s, t, i + 1, j), lcs(s, t, i, j + 1));
}
int lcs(string s, string t)
{
	dp.resize(s.size(), vector<int>(t.size(), -1));
	return lcs(s, t, 0, 0);
}



2D DP Approach
#include<bits/stdc++.h>
int lcs(string s, string t)
{
	int n = s.size(), m = t.size();
	vector<vector<int>> dp(n + 1, vector<int>(m + 1));

	for(int i = n;i >= 0;i--) {
		for(int j = m;j >= 0;j--) {
			if(i == n || j == m) { // either of the string is empty
				dp[i][j] = 0;
			} else if(s[i] == t[j]) {
				dp[i][j] = 1 + dp[i + 1][j + 1];
			} else {
				dp[i][j] = max(dp[i + 1][j], dp[i][j + 1]);
			}
		}
	}
	return dp[0][0];
}
