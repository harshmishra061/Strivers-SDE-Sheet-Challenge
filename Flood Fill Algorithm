Using DFS ------>

vector<vector<int>> dir = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
void dfs(vector<vector<int>>& image, int i, int j, int& oldColor, int& newColor) {
    image[i][j] = newColor;
    for(int k = 0;k < 4;k++) {
        int newi = i + dir[k][0];
        int newj = j + dir[k][1];
        if(newi >= 0 && newi < image.size() && newj >= 0 && newj < image[0].size() && image[newi][newj] == oldColor) {
            dfs(image, newi, newj, oldColor, newColor);
        }
    }
}

vector<vector<int>> floodFill(vector<vector<int>> & image, int x, int y, int newColor) {
    int oldColor = image[x][y];
    if(oldColor == newColor) return image;

    dfs(image, x, y, oldColor, newColor);
    return image;
}



Using BFS ------->


#include<bits/stdc++.h>
vector<vector<int>> floodFill(vector<vector<int>> &image, int x, int y, int newColor)
{
    int oldColor = image[x][y];
    if(oldColor == newColor) return image;

    vector<vector<int>> dir = { {1, 0}, {-1, 0}, {0, 1}, {0, -1}};

    queue<pair<int, int>> q;
    q.push({x, y});
    image[x][y] = newColor;
    
    while(!q.empty()) {
        int i = q.front().first, j = q.front().second; q.pop();
        for(int k = 0;k < 4;k++) {
            int newi = i + dir[k][0];
            int newj = j + dir[k][1];
            if(newi >= 0 && newi < image.size() && newj >= 0 && newj < image[0].size() && image[newi][newj] == oldColor) {
                image[newi][newj] = newColor;
                q.push({newi, newj});
            }
        }
    }

    return image;
}
