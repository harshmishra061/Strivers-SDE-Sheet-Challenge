void inorder(TreeNode<int>* node, vector<int>& res) {
    if(node == NULL) return;
    inorder(node->left, res);
    if(node->left == NULL && node->right == NULL) {
        res.push_back(node->data);
    }
    inorder(node->right, res);
}
vector<int> traverseBoundary(TreeNode<int>* root){
    vector<int> res;

    res.push_back(root->data);

    TreeNode<int>* node = root->left;
    while(node != NULL && (node->left != NULL || node->right != NULL)) {
        res.push_back(node->data);
        if(node->left != NULL) {
            node = node->left;
        } else {
            node = node->right;
        }
    }

    inorder(root->left, res); // For extracting root's left leaf nodes
    inorder(root->right, res); // For extracting root's right leaf nodes
    
    vector<int> res2;
    node = root->right;
    while(node != NULL && (node->left != NULL || node->right != NULL)) {
        res2.push_back(node->data);
        if(node->right != NULL) {
            node = node->right;
        } else {
            node = node->left;
        }
    }

    reverse(res2.begin(), res2.end());
    res.insert(res.end(), res2.begin(), res2.end());
    
    return res;

}
