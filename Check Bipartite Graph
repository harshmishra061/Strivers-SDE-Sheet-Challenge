// DFS
bool dfs(int node, vector<vector<int>>& edges, vector<int>& color) {
	for(int i = 0;i < edges.size();i++) {
		if(edges[node][i] == false) continue;
		if(color[i] == -1) {
			color[i] = 1 - color[node];
			dfs(i, edges, color);
		} else if(color[i] == color[node]) return false;
	}
	return true;
}

bool isGraphBirpatite(vector<vector<int>> &edges) {
	//If Graph is Bipartite, it can be colored with <= 2 colors
	int n = edges.size();
	vector<int> color(n, -1);

	for(int i = 0;i < n;i++) {
		if(color[i] == -1) { // then color the subgraph
			color[i] = 1;
			if(dfs(i, edges, color) == false) return false;
		}
	}
	return true;
}


//BFS

#include<bits/stdc++.h>
bool isGraphBirpatite(vector<vector<int>> &edges) {
	//If Graph is Bipartite, it can be colored with <= 2 colors
	int n = edges.size();
	vector<int> color(n, -1);

	for(int i = 0;i < n;i++) {
		if(color[i] == -1) { // then color the subgraph
			color[i] = 1;
			queue<int> q;
			q.push(i);
			while(!q.empty()) {
				int node = q.front(); q.pop();
				for(int nbr = 0;nbr < n;nbr++) {
					if(edges[node][nbr] == 0) continue;
					if(color[nbr] == -1) {
						color[nbr] = 1 - color[node];
						q.push(nbr);
					} else if(color[nbr] == color[node]) return false;
				}
			}
		}
	}
	return true;
}
