// First Method
#include<bits/stdc++.h>
int largestRectangle(vector < int > & arr) {
  int n = arr.size();
  vector<int> nslIdx(n), nsrIdx(n); // nextSmallerOnLeft's Idx nextSmallerOnRight's Idx
  stack<int> st;
  for(int i = 0;i < n;i++) {
    while(!st.empty() && arr[st.top()] >= arr[i]) {
      st.pop();
    }
    if(!st.empty()) {
      nslIdx[i] = st.top();
    } else {
      nslIdx[i] = -1;
    }
    st.push(i);
  }
  st = stack<int>();
  for(int i = n - 1;i >= 0;i--) {
    while(!st.empty() && arr[i] <= arr[st.top()]) {
      st.pop();
    }
    if(!st.empty()) {
      nsrIdx[i] = st.top();
    } else {
      nsrIdx[i] = n;
    }
    st.push(i);
  }
  int res = 0;
  for(int i = 0;i < n;i++) {
    int height = arr[i];
    int width = nsrIdx[i] - nslIdx[i] - 1;
    res = max(res, height * width);
  }
  return res;
}


// Second Method

#include<bits/stdc++.h>
int largestRectangle(vector < int > & arr) {
  int n = arr.size(), res = 0;
  stack<int> st;
  for(int i = 0;i <= n;i++) {
    while(!st.empty() && (i == n || arr[st.top()] > arr[i])) {
      int height = arr[st.top()]; st.pop();
      int lIdx = st.empty() ? -1 : st.top();
      int rIdx = i;
      int width = rIdx - lIdx - 1;
      res = max(res, height * width);
    }
    st.push(i);
  }
  return res;
}
