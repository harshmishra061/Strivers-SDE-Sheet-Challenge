vector<vector<int>> dp;
int func(int n, int w, vector<int>& weights, vector<int>& values) {
	if(n == 0 || w == 0) return 0;

	if(dp[n][w] != -1) return dp[n][w];
	
	// Nth item is not taken inot bag
	int profit = func(n - 1, w, weights, values);
	// if Nth item is possible to be taken into bag
	if(w - weights[n - 1] >= 0) {
		profit = max(profit, values[n - 1] + func(n - 1, w - weights[n - 1], weights, values));
	}

	return dp[n][w] = profit;
}


int maxProfit(vector<int> &values, vector<int> &weights, int n, int w)
{
	dp = vector<vector<int>>(n + 1, vector<int>(w + 1, -1));
	return func(n, w, weights, values); // by considering first N elements and maximum weight W, what is the maximum profit we can make
}


// Tabulation - Using 2D Array

int maxProfit(vector<int> &values, vector<int> &weights, int n, int w)
{
	vector<vector<int>> dp(n + 1, vector<int>(w + 1));

	for(int i = 0;i <= n;i++) {
		for(int j = 0;j <= w;j++) {
			if(i == 0 || j == 0) { // if no item is considered or bag cap is 0
				dp[i][j] = 0;
			} else {
				dp[i][j] = dp[i - 1][j];
				if(j - weights[i - 1] >= 0) {
					dp[i][j] = max(dp[i][j], values[i - 1] + dp[i - 1][j - weights[i - 1]]);
				}
			}
		}
	}
	return dp[n][w];
}

// Using 1D Array
int maxProfit(vector<int> &values, vector<int> &weights, int n, int w)
{
	vector<int> dp(w + 1, 0);
	
	for(int i = 1;i <= n;i++) {
		for(int j = w;j >= 0;j--) {
			if(j + weights[i - 1] <= w) {
				dp[j + weights[i - 1]] = max(dp[j + weights[i - 1]], values[i - 1] + dp[j]);
			}
		}
	}
	return dp[w];
}
