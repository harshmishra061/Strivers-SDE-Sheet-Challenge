// Recursive Approach
#include<bits/stdc++.h>
vector<vector<long>> dp;
long countWaysToMakeChange(int idx, int* denominations, int n, int value) {
    if(value == 0) return 1;
    if(idx == n) return 0;

    if(dp[idx][value] != -1) return dp[idx][value];

    long count = 0;
    if(denominations[idx] <= value) {
        count += countWaysToMakeChange(idx, denominations, n, value - denominations[idx]);
    }
    count += countWaysToMakeChange(idx + 1, denominations, n, value);

    return dp[idx][value] = count;
}


long countWaysToMakeChange(int *denominations, int n, int value)
{ 
    dp = vector<vector<long>>(n, vector<long>(value + 1, -1));
    return countWaysToMakeChange(0, denominations, n, value);
}


// Tabulation Approach
#include<bits/stdc++.h>
long countWaysToMakeChange(int *denominations, int n, int value)
{
    vector<long> dp(value + 1, 0);
    dp[0] = 1;
    for(int i = 0;i < n;i++) {
        for(int j = denominations[i];j <= value;j++) {
            dp[j] += dp[j - denominations[i]];
        }
    }
    return dp[value];
}
