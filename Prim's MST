#include <bits/stdc++.h> 
vector<pair<pair<int, int>, int>> calculatePrimsMST(int n, int m, vector<pair<pair<int, int>, int>> &g)
{
    vector<pair<int, int>> adj[n + 1];
    for(auto& edge : g) {
        int u = edge.first.first;
        int v = edge.first.second;
        int w = edge.second;
        adj[u].push_back({v, w});
        adj[v].push_back({u, w});
    }

    vector<int> dis(n + 1, INT_MAX);
    vector<bool> partOfMST(n + 1, false);
    vector<int> par(n + 1);

    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
    dis[1] = 0;
    par[1] = -1;
    pq.push({0, 1});

    while(!pq.empty()) {
        int node = pq.top().second; pq.pop();
        if(partOfMST[node] == true) continue;
        partOfMST[node] = true;

        for(auto& it : adj[node]) {
            int nbr = it.first;
            int wt = it.second;
            
            if(partOfMST[nbr]) continue;

            if(wt < dis[nbr]) {
                dis[nbr] = wt;
                par[nbr] = node;
                pq.push({dis[nbr], nbr});
            }
        }
    }

    vector<pair<pair<int, int>, int>> res;
    for(int i = 2;i <= n;i++) {
        res.push_back({{par[i], i}, dis[i]});
    }
    return res;

}
