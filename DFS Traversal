void dfs(int node, vector<bool>& visited, vector<int>& res, vector<vector<int>>& adj) {
    visited[node] = true;
    res.push_back(node);

    for(auto& nbr : adj[node]) {
        if(visited[nbr] == true) continue;
        dfs(nbr, visited, res, adj);
    }
}

vector<vector<int>> depthFirstSearch(int V, int E, vector<vector<int>> &edges)
{
    vector<vector<int>> adj(V);
    for(int i = 0;i < E;i++) {
        adj[edges[i][0]].push_back(edges[i][1]);
        adj[edges[i][1]].push_back(edges[i][0]);
    }

    vector<vector<int>> res;
    vector<bool> visited(V, false);

    for(int i = 0;i < V;i++) {
        if(visited[i] == true) continue;
        
        vector<int> vec;
        dfs(i, visited, vec, adj);
        res.push_back(vec);
    }
    return res;
}
