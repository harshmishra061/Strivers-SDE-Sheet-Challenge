// When Insertion is Costly

#include <bits/stdc++.h> 
class Stack {
    queue<int> q1, q2; 
   public:
    Stack() { }

    /*----------------- Public Functions of Stack -----------------*/

    int getSize() {
        return q1.size();
    }

    bool isEmpty() {
        return q1.empty();
    }

    void push(int element) {
        q2.push(element);
        while(!q1.empty()) {
            q2.push(q1.front());
            q1.pop();
        }

        while(!q2.empty()) {
            q1.push(q2.front());
            q2.pop();
        }
    }

    int pop() {
        if(q1.empty()) return -1;
        int val = q1.front();
        q1.pop();
        return val;
    }

    int top() {
        if(q1.empty()) return -1;
        return q1.front();
    }
};




// When deletion is Costly
#include <bits/stdc++.h> 
class Stack {
    queue<int> q1, q2; 
   public:
    Stack() { }

    /*----------------- Public Functions of Stack -----------------*/

    int getSize() {
        return q1.size();
    }

    bool isEmpty() {
        return q1.empty();
    }

    void push(int element) {
        q1.push(element);
    }

    int pop() {
        if(q1.empty()) return -1;
        while(q1.size() != 1) {
            q2.push(q1.front());
            q1.pop();
        }
        int val = q1.front();
        q1.pop();
        while(!q2.empty()) {
            q1.push(q2.front());
            q2.pop();
        }
        return val;
    }

    int top() {
        if(q1.empty()) return -1;
        while(q1.size() != 1) {
            q2.push(q1.front());
            q1.pop();
        }
        int val = q1.front();
        q2.push(q1.front());
        q1.pop();
        while(!q2.empty()) {
            q1.push(q2.front());
            q2.pop();
        }
        return val;
    }
};
