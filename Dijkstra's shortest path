#include <bits/stdc++.h> 
using namespace std;
vector<int> dijkstra(vector<vector<int>> &vec, int n, int e, int source) {
    vector<vector<pair<int, int>>> adj(n);
    for(int i = 0;i < e;i++) {
        int u = vec[i][0], v = vec[i][1], w = vec[i][2];
        adj[u].push_back({v, w});
        adj[v].push_back({u, w});
    }

    vector<int> dis(n, INT_MAX);
    vector<bool> taken(n, false); // min dis evaluated or not

    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
    dis[source] = 0;
    pq.push({0, 0});

    while(!pq.empty()) {
        int node = pq.top().second; pq.pop();
        if(taken[node]) continue;

        taken[node] = true;
        for(auto& it : adj[node]) {
            int nbr = it.first;
            int wt = it.second;
            if(dis[node] + wt < dis[nbr]) {
                dis[nbr] = dis[node] + wt;
                pq.push({dis[nbr], nbr});
            }
        }
    }

    return dis;

}
